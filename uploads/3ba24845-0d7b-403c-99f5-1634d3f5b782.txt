If any new library added to package.json then need to perform below steps

1. Copy that package to all backend repository - Push to staging
2. create/use temp/nodejs folder
3. cp package.json temp/nodejs/
4. goto temp/nodejs/ folder & perform this command "npm i --production"
5. come out from nodejs folder and zip nodejs folder "zip -r nodejs.zip nodejs" and nodejs.zip should be created
6. Goto AWS
7. search lamda -> click on layers left side -> click on "vannatok-backend-packages"
8. click on "create version" -> Add description "vannatok-backend-packages" then choose upload a .zip file
9. click on upload and choose nodejs.zip ( Location is where you created in step 5 ).
10. Choose runtime "Node.js 12.x" and create and copy latest version.
11. Come to codebase, open serverless.yml, search for "layers" change to new version
12. Do Step 11 for all repo and push code in stage.

"apple-auth": "^1.0.7",


serverless-offline-sqs:
    autoCreate: true                 # create queue if not exists
    apiVersion: '2012-11-05'
    endpoint: http://0.0.0.0:9324
    region: ap-southeast-1
    accessKeyId: AKIA6JBFEN6BQRT3AK5W
    secretAccessKey: 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
    skipCacheInvalidation: false

// Deleting message from the queue after message processed
    const sqs = new SQS({ region: process.env.DEPLOYMENT_REGION });
    const queueUrl: DeleteMessageRequest = 'https://sqs.ap-southeast-1.amazonaws.com/981477912451/Spider_Job_File_Processing';
    sqs.deleteMessage(queueUrl, event.Records[0].receiptHandle);

ELASTICMQ_SERVER_URL = "http://localhost:9324"

const uploadJobsProcessingFunc: LambdaLogic<{}, uploadType, {}>= async (event) => {
    
    const companyId = event.body.identifier;
    const fileUrl = event.body.fileUrl;
    const createdBy = event.body.createdBy;
    const updatedBy = event.body.updatedBy;
    const identifier = event.body.identifier;

    let successCount: number = 0;
    let failureCount: number = 0;
    let totalCount: number = 0;
    const company: ICompany = await Company.findById(companyId).select("name").lean();
    if(!company) throw new HttpError().BadRequest(COMPANY_NOT_EXISTS);

    const jsonArr = await csv().fromStream(request.get(fileUrl));
    if(!jsonArr){
        const updateBody = {
            success: false,
            status: "Failed"
        }
        const job_upload_update = await JobUpload.findOneAndUpdate({identifier: identifier }, { $set: { ...updateBody } }, {new: true, lean: true});
        if(!job_upload_update || job_upload_update.identifier != identifier) throw new HttpError().BadRequest(JOB_UPLOAD_NOT_EXISTS);
    }
    for (const jobObj of jsonArr) {
        try{
            const jobData = {
                company: company,
                title: jobObj.job_title
            }
            const jobDetails = await createHelper(jobData)
            const skills = {
                category: jobObj.category,
                job_type: jobObj.job_type
            }
            const data: jobTypes = {
                title: jobObj.job_title,
                description: jobObj.job_description,
                type: 'Permanent',
                external: true,
                external_job_ref: jobObj.job_ref,
                external_job_url: jobObj.job_URL,
                external_id: jobObj.ID,
                location: [jobObj.location],
                jobId: jobDetails.jobId,
                skills: [skills],
                status: "New",
                companyId: companyId,
                createdBy: createdBy,
                updatedBy: updatedBy,
                slug: jobDetails.slug,
            }
                
            let job: IJob = new Job(data);
            await job.save();
            successCount += 1;
        }
        catch(err){
            failureCount += 1;
            console.log(err);
        }
    }

    totalCount = successCount + failureCount;
    const updatebody = {
        success: true,
        successCount: successCount,
        failureCount: failureCount,
        totalCount: totalCount,
        status: "Processed"
    }

    const job_upload_update = await JobUpload.findOneAndUpdate({identifier: identifier }, { $set: { ...updatebody } }, {new: true, lean: true});
    if(!job_upload_update || job_upload_update.identifier != identifier) throw new HttpError().BadRequest(JOB_UPLOAD_NOT_EXISTS);
    return { success: true }
}

export const uploadJobsProcessing = handlerWrapper(uploadJobsProcessingFunc);

  uploadJobsProcessing:
    handler: src/index.uploadJobs
    events:
      - http:
          path: /v1/job/uploadJobsProcessing
          method: post
          cors: ${self:custom.common.cors.${self:custom.stage}.defaultCache}
